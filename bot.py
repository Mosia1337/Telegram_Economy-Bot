import asyncio
import random
import datetime
import math
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "–í–ê–® –¢–û–ö–ï–ù"
bot = Bot(token=TOKEN)
dp = Dispatcher()


# –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
class EconomySystem:
    def __init__(self):
        self.users = {}
        self.exchange_rates = {"USD": 1.0, "EUR": 0.85, "BTC": 0.000025, "GOLD": 0.0005}
        self.stock_market = {
            "TECH": {"price": 100, "volatility": 0.1, "emoji": "üíª"},
            "OIL": {"price": 75, "volatility": 0.15, "emoji": "üõ¢Ô∏è"},
            "GOLD": {"price": 1800, "volatility": 0.05, "emoji": "ü•á"},
            "CRYPTO": {"price": 50, "volatility": 0.25, "emoji": "üîê"}
        }
        self.businesses = {
            "FACTORY": {"name": "–§–∞–±—Ä–∏–∫–∞", "cost": 5000, "income": 300, "emoji": "üè≠"},
            "SHOP": {"name": "–ú–∞–≥–∞–∑–∏–Ω", "cost": 2000, "income": 150, "emoji": "üè™"},
            "FARM": {"name": "–§–µ—Ä–º–∞", "cost": 1000, "income": 80, "emoji": "üöú"},
            "IT": {"name": "IT –ö–æ–º–ø–∞–Ω–∏—è", "cost": 10000, "income": 700, "emoji": "üíª"}
        }
        self.transaction_log = []
        self.global_events = {
            "current": None,
            "end_time": None
        }
        self.lottery = {"pool": 0, "tickets": {}}
        self.last_market_update = datetime.datetime.now()
        self.black_market = {
            "WEAPON": {"price": 1500, "risk": 0.3, "emoji": "üî´"},
            "ARTIFACT": {"price": 3000, "risk": 0.5, "emoji": "üè∫"},
            "DATA": {"price": 2500, "risk": 0.4, "emoji": "üíæ"}
        }

    def init_user(self, user_id, username):
        if user_id not in self.users:
            self.users[user_id] = {
                "coins": 1000,
                "gems": 0,
                "bank": 0,
                "last_daily": None,
                "last_work": None,
                "investments": {},
                "businesses": {},
                "username": username,
                "energy": 100,
                "prestige": 0,
                "last_lottery": None,
                "criminal_record": 0
            }
        return self.users[user_id]

    def update_market(self):
        now = datetime.datetime.now()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä—ã–Ω–æ–∫ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        if (now - self.last_market_update).total_seconds() < 300:
            return

        self.last_market_update = now

        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        if self.global_events["current"] and now > self.global_events["end_time"]:
            self.global_events["current"] = None

        # –°–ª—É—á–∞–π–Ω–æ–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ (10% —à–∞–Ω—Å)
        if not self.global_events["current"] and random.random() < 0.1:
            events = [
                ("CRISIS", "üí• –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫—Ä–∏–∑–∏—Å! –¶–µ–Ω—ã –Ω–∞ –∞–∫—Ü–∏–∏ —É–ø–∞–ª–∏!", -0.2),
                ("BOOM", "üöÄ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –±—É–º! –¶–µ–Ω—ã –Ω–∞ –∞–∫—Ü–∏–∏ —Ä–∞—Å—Ç—É—Ç!", 0.25),
                ("INFLATION", "üìà –ò–Ω—Ñ–ª—è—Ü–∏—è! –¶–µ–Ω—ã –Ω–∞ –±–∏–∑–Ω–µ—Å –≤—ã—Ä–æ—Å–ª–∏!", 0.15),
                ("HACKING", "üë®‚Äçüíª –ê—Ç–∞–∫–∞ —Ö–∞–∫–µ—Ä–æ–≤! –ö–∏–±–µ—Ä-–∞–∫—Ç–∏–≤—ã —É–ø–∞–ª–∏ –≤ —Ü–µ–Ω–µ!", -0.3)
            ]
            event = random.choice(events)
            self.global_events["current"] = event[0]
            self.global_events["end_time"] = now + datetime.timedelta(minutes=30)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è
            for stock in self.stock_market.values():
                stock["price"] *= (1 + event[2])

            return event[1]

        # –û–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞
        for currency in self.exchange_rates:
            if currency != "USD":
                change = random.uniform(-0.05, 0.05)
                self.exchange_rates[currency] *= (1 + change)

        for stock in self.stock_market.values():
            change = random.uniform(-stock["volatility"], stock["volatility"])
            stock["price"] = max(10, stock["price"] * (1 + change))

        return None

    def daily_bonus(self, user_id):
        user = self.users[user_id]
        now = datetime.datetime.now()

        if user["last_daily"]:
            elapsed = now - user["last_daily"]
            if elapsed.total_seconds() < 86400:
                next_bonus = user["last_daily"] + datetime.timedelta(days=1)
                return False, (next_bonus - now)

        streak = user.get("daily_streak", 0) + 1
        bonus = 50 + min(streak * 10, 100) + random.randint(1, 50)

        # –ü—Ä–µ–º–∏—É–º-–±–æ–Ω—É—Å –∑–∞ –ø—Ä–µ—Å—Ç–∏–∂
        prestige_bonus = min(user["prestige"] * 5, 50)
        bonus += prestige_bonus

        user["coins"] += bonus
        user["last_daily"] = now
        user["daily_streak"] = streak
        user["energy"] = min(user["energy"] + 30, 100)

        return True, bonus

    def work(self, user_id, job_type):
        user = self.users[user_id]
        now = datetime.datetime.now()

        if user["energy"] < 20:
            return False, "energy"

        if user["last_work"]:
            elapsed = (now - user["last_work"]).total_seconds()
            if elapsed < 300:
                cooldown = 300 - elapsed
                return False, cooldown

        if job_type == "clicker":
            income = random.randint(10, 30)
        elif job_type == "trader":
            income = random.randint(50, 100)
        elif job_type == "miner":
            income = random.randint(30, 70)
        else:
            income = random.randint(20, 50)

        # –£–ª—É—á—à–µ–Ω–∏–µ –∑–∞ –ø—Ä–µ—Å—Ç–∏–∂
        income = int(income * (1 + user["prestige"] / 100))

        user["coins"] += income
        user["last_work"] = now
        user["energy"] = max(user["energy"] - 20, 0)
        return True, income

    def bank_interest(self):
        for user in self.users.values():
            if user["bank"] > 0:
                interest = user["bank"] * (0.01 + user["prestige"] / 5000)
                user["bank"] += interest
                self.log_transaction(
                    "BANK",
                    f"+{interest:.2f} coins (–ø—Ä–æ—Ü–µ–Ω—Ç—ã)",
                    user["coins"],
                    user["bank"]
                )

    def transfer(self, sender_id, receiver_id, amount):
        if sender_id not in self.users or receiver_id not in self.users:
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

        if self.users[sender_id]["coins"] < amount:
            return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"

        tax = int(amount * 0.1)
        received = amount - tax

        self.users[sender_id]["coins"] -= amount
        self.users[receiver_id]["coins"] += received

        # –ü—Ä–µ—Å—Ç–∏–∂ –∑–∞ –ø–µ—Ä–µ–≤–æ–¥—ã
        self.users[sender_id]["prestige"] += amount // 1000
        self.users[receiver_id]["prestige"] += received // 1000

        self.log_transaction(
            sender_id,
            f"–ü–µ—Ä–µ–≤–æ–¥ {receiver_id}: -{amount} coins",
            self.users[sender_id]["coins"],
            self.users[sender_id]["bank"]
        )
        self.log_transaction(
            receiver_id,
            f"–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç {sender_id}: +{received} coins",
            self.users[receiver_id]["coins"],
            self.users[receiver_id]["bank"]
        )

        return True, (received, tax)

    def buy_business(self, user_id, business_type):
        if business_type not in self.businesses:
            return False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å"

        business = self.businesses[business_type]
        user = self.users[user_id]

        if user["coins"] < business["cost"]:
            return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"

        user["coins"] -= business["cost"]
        if business_type in user["businesses"]:
            user["businesses"][business_type] += 1
        else:
            user["businesses"][business_type] = 1

        user["prestige"] += business["cost"] // 500

        self.log_transaction(
            user_id,
            f"–ü–æ–∫—É–ø–∫–∞ {business['name']}: -{business['cost']} coins",
            user["coins"],
            user["bank"]
        )

        return True, business["name"]

    def collect_business_income(self, user_id):
        user = self.users[user_id]
        total_income = 0

        for business_type, quantity in user["businesses"].items():
            business = self.businesses[business_type]
            income = business["income"] * quantity
            total_income += income
            user["coins"] += income

        # –ü—Ä–µ—Å—Ç–∏–∂ –∑–∞ –¥–æ—Ö–æ–¥
        user["prestige"] += total_income // 100

        return total_income

    def invest(self, user_id, asset, amount):
        if asset not in self.stock_market:
            return False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–∫—Ç–∏–≤"

        user = self.users[user_id]
        if user["coins"] < amount:
            return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"

        user["coins"] -= amount
        if asset in user["investments"]:
            user["investments"][asset] += amount
        else:
            user["investments"][asset] = amount

        user["prestige"] += amount // 500

        self.log_transaction(
            user_id,
            f"–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ {asset}: -{amount} coins",
            user["coins"],
            user["bank"]
        )

        return True, asset

    def sell_investment(self, user_id, asset):
        user = self.users[user_id]
        if asset not in user["investments"] or user["investments"][asset] <= 0:
            return False, "–ù–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"

        amount = user["investments"][asset]
        current_value = int(amount * (self.stock_market[asset]["price"] / 100))

        user["coins"] += current_value
        user["investments"][asset] = 0

        profit = current_value - amount
        profit_text = f" (+{profit})" if profit > 0 else f" ({profit})"

        # –ü—Ä–µ—Å—Ç–∏–∂ –∑–∞ –ø—Ä–∏–±—ã–ª—å
        if profit > 0:
            user["prestige"] += profit // 200

        self.log_transaction(
            user_id,
            f"–ü—Ä–æ–¥–∞–∂–∞ {asset}: +{current_value} coins{profit_text}",
            user["coins"],
            user["bank"]
        )

        return True, (current_value, profit)

    def deposit_to_bank(self, user_id, amount):
        user = self.users[user_id]
        if user["coins"] < amount:
            return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"

        user["coins"] -= amount
        user["bank"] += amount

        user["prestige"] += amount // 1000

        self.log_transaction(
            user_id,
            f"–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –¥–µ–ø–æ–∑–∏—Ç: -{amount} coins",
            user["coins"],
            user["bank"]
        )

        return True, amount

    def withdraw_from_bank(self, user_id, amount):
        user = self.users[user_id]
        if user["bank"] < amount:
            return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–∞–Ω–∫–µ"

        user["bank"] -= amount
        user["coins"] += amount

        self.log_transaction(
            user_id,
            f"–°–Ω—è—Ç–∏–µ —Å –±–∞–Ω–∫–∞: +{amount} coins",
            user["coins"],
            user["bank"]
        )

        return True, amount

    def exchange(self, user_id, from_curr, to_curr, amount):
        if from_curr == "COIN":
            value = amount * self.exchange_rates.get(to_curr, 1)
        else:
            value = amount / self.exchange_rates.get(from_curr, 1)

        return True, value

    def log_transaction(self, user_id, description, new_balance, new_bank):
        log_entry = {
            "timestamp": datetime.datetime.now(),
            "user_id": user_id,
            "description": description,
            "balance": new_balance,
            "bank": new_bank
        }
        self.transaction_log.append(log_entry)

    def get_rich_list(self):
        sorted_users = sorted(
            self.users.items(),
            key=lambda x: x[1]["coins"] + x[1]["bank"] + sum(
                self.stock_market[asset]["price"] / 100 * amount
                for asset, amount in x[1]["investments"].items()
            ) + sum(
                self.businesses[b]["cost"] * count
                for b, count in x[1]["businesses"].items()
            ),
            reverse=True
        )[:10]
        return sorted_users

    def get_power_list(self):
        sorted_users = sorted(
            self.users.items(),
            key=lambda x: sum(x[1]["businesses"].values()) * 100 +
                          sum(x[1]["investments"].values()) +
                          x[1]["prestige"] * 10,
            reverse=True
        )[:10]
        return sorted_users

    def buy_lottery_ticket(self, user_id, amount=1):
        user = self.users[user_id]
        cost = amount * 100

        if user["coins"] < cost:
            return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"

        now = datetime.datetime.now()
        if user["last_lottery"] and (now - user["last_lottery"]).total_seconds() < 3600:
            return False, "cooldown"

        user["coins"] -= cost
        self.lottery["pool"] += cost
        self.lottery["tickets"][user_id] = self.lottery["tickets"].get(user_id, 0) + amount
        user["last_lottery"] = now
        user["prestige"] += amount * 2

        return True, amount

    def draw_lottery(self):
        if not self.lottery["tickets"]:
            return None

        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        tickets = []
        for user_id, count in self.lottery["tickets"].items():
            tickets.extend([user_id] * count)

        winner_id = random.choice(tickets)
        prize = int(self.lottery["pool"] * 0.8)  # 80% –ø—Ä–∏–∑, 20% –∫–æ–º–∏—Å—Å–∏—è
        self.users[winner_id]["coins"] += prize
        self.users[winner_id]["prestige"] += prize // 100

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ—Ç–µ—Ä–µ—é
        result = (winner_id, prize)
        self.lottery = {"pool": 0, "tickets": {}}

        return result

    def black_market_deal(self, user_id, item_type):
        if item_type not in self.black_market:
            return False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"

        item = self.black_market[item_type]
        user = self.users[user_id]

        if user["coins"] < item["price"]:
            return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"

        # –†–∏—Å–∫ –±—ã—Ç—å –ø–æ–π–º–∞–Ω–Ω—ã–º
        if random.random() < item["risk"]:
            fine = int(item["price"] * 0.5)
            user["coins"] -= fine
            user["criminal_record"] += 1
            return False, f"–ü–æ–ª–∏—Ü–∏—è –ø–æ–π–º–∞–ª–∞ –≤–∞—Å! –®—Ç—Ä–∞—Ñ: {fine} coins"

        # –£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞
        profit = random.randint(200, 800)
        user["coins"] += profit
        user["criminal_record"] += 0.5

        return True, profit


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
economy = EconomySystem()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    buttons = [
        [KeyboardButton(text="üí∞ –ö–æ—à–µ–ª–µ–∫"), KeyboardButton(text="üíº –†–∞–±–æ—Ç–∞")],
        [KeyboardButton(text="üè¶ –ë–∞–Ω–∫"), KeyboardButton(text="üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")],
        [KeyboardButton(text="üè≠ –ë–∏–∑–Ω–µ—Å"), KeyboardButton(text="üé∞ –õ–æ—Ç–µ—Ä–µ—è")],
        [KeyboardButton(text="üìä –¢–æ–ø—ã"), KeyboardButton(text="üîÅ –û–±–º–µ–Ω –≤–∞–ª—é—Ç")],
        [KeyboardButton(text="üåë –ß–µ—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def wallet_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üí∏ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏", callback_data="transfer_money")
    builder.button(text="üìù –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π", callback_data="transaction_history")
    builder.button(text="‚ö° –≠–Ω–µ—Ä–≥–∏—è", callback_data="show_energy")
    return builder.as_markup()


def work_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üñ±Ô∏è –ö–ª–∏–∫–µ—Ä-—Ñ–µ—Ä–º–∞", callback_data="work:clicker")
    builder.button(text="üìä –ë–∏—Ä–∂–µ–≤–æ–π —Ç—Ä–µ–π–¥–∏–Ω–≥", callback_data="work:trader")
    builder.button(text="‚õèÔ∏è –ö—Ä–∏–ø—Ç–æ-–º–∞–π–Ω–∏–Ω–≥", callback_data="work:miner")
    builder.button(text="üíé –î–æ–±—ã—á–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤", callback_data="work:miner_gem")
    return builder.as_markup()


def bank_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üí≥ –ü–æ–ª–æ–∂–∏—Ç—å –≤ –±–∞–Ω–∫", callback_data="bank:deposit")
    builder.button(text="üèß –°–Ω—è—Ç—å —Å –±–∞–Ω–∫–∞", callback_data="bank:withdraw")
    builder.button(text="üìä –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç", callback_data="bank:interest")
    return builder.as_markup()


def investment_keyboard():
    builder = InlineKeyboardBuilder()
    for asset, data in economy.stock_market.items():
        builder.button(text=f"{data['emoji']} {asset} (${data['price']})", callback_data=f"invest:{asset}")
    builder.button(text="üí± –ü—Ä–æ–¥–∞—Ç—å –∞–∫—Ç–∏–≤—ã", callback_data="invest:sell")
    builder.adjust(2)
    return builder.as_markup()


def business_keyboard():
    builder = InlineKeyboardBuilder()
    for business_id, business_data in economy.businesses.items():
        builder.button(text=f"{business_data['emoji']} {business_data['name']} (${business_data['cost']})",
                       callback_data=f"business:{business_id}")
    builder.button(text="üè≠ –°–æ–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥", callback_data="business:collect")
    builder.adjust(1)
    return builder.as_markup()


def lottery_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üé´ –ö—É–ø–∏—Ç—å 1 –±–∏–ª–µ—Ç (100 coins)", callback_data="lottery:buy:1")
    builder.button(text="üé´üé´ –ö—É–ø–∏—Ç—å 5 –±–∏–ª–µ—Ç–æ–≤ (450 coins)", callback_data="lottery:buy:5")
    builder.button(text="üèÜ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ—Ç–µ—Ä–µ—é", callback_data="lottery:draw")
    return builder.as_markup()


def black_market_keyboard():
    builder = InlineKeyboardBuilder()
    for item_id, item_data in economy.black_market.items():
        builder.button(text=f"{item_data['emoji']} {item_id} (${item_data['price']})",
                       callback_data=f"black_market:{item_id}")
    builder.adjust(1)
    return builder.as_markup()


# =====================
# –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
# =====================

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    user_id = message.from_user.id
    economy.init_user(user_id, message.from_user.full_name)

    await message.answer(
        "üè¶ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é –ò–º–ø–µ—Ä–∏—é 2.0!\n"
        "–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Å 1000 coins. –í–∞—à–∞ —Ü–µ–ª—å - —Å—Ç–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –º–∞–≥–Ω–∞—Ç–æ–º!\n\n"
        "üî• –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ ‚ö° –°–∏—Å—Ç–µ–º–∞ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ üèÜ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ—Å—Ç–∏–∂–∞ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞\n"
        "‚Ä¢ üé∞ –ï–∂–µ—á–∞—Å–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è\n"
        "‚Ä¢ üåë –ß–µ—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫ —Å —Ä–∏—Å–∫–æ–º\n"
        "‚Ä¢ üí• –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–π —ç–∫–æ–Ω–æ–º–∏–∫–æ–π!",
        reply_markup=main_keyboard()
    )


@dp.message(F.text == "üí∞ –ö–æ—à–µ–ª–µ–∫")
async def show_wallet(message: types.Message):
    user_id = message.from_user.id
    user = economy.users.get(user_id)

    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return

    event_msg = economy.update_market()
    if event_msg:
        await message.answer(f"‚ö†Ô∏è {event_msg}")

    investments_value = sum(
        economy.stock_market[asset]["price"] / 100 * amount
        for asset, amount in user["investments"].items()
    )
    business_value = sum(
        economy.businesses[b]["cost"] * count
        for b, count in user["businesses"].items()
    )
    total_assets = user["coins"] + user["bank"] + investments_value + business_value

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    event_info = ""
    if economy.global_events["current"]:
        event_time_left = (economy.global_events["end_time"] - datetime.datetime.now()).seconds // 60
        event_info = f"\n\n‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {economy.global_events['current']} ({event_time_left} –º–∏–Ω. –æ—Å—Ç–∞–ª–æ—Å—å)"

    await message.answer(
        f"üíº –í–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:\n\n"
        f"üí∞ –ù–∞–ª–∏—á–Ω—ã–µ: {user['coins']} coins\n"
        f"üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç: {user['bank']} coins\n"
        f"üíé –î—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ –∫–∞–º–Ω–∏: {user['gems']} gems\n"
        f"‚ö° –≠–Ω–µ—Ä–≥–∏—è: {user['energy']}/100\n"
        f"üèÜ –ü—Ä–µ—Å—Ç–∏–∂: {user['prestige']} pts\n\n"
        f"üìä –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {investments_value:.2f} coins\n"
        f"üè≠ –ë–∏–∑–Ω–µ—Å –∞–∫—Ç–∏–≤—ã: {business_value} coins\n"
        f"üíµ –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª: {total_assets:.2f} coins"
        f"{event_info}",
        reply_markup=wallet_keyboard()
    )


@dp.message(F.text == "üíº –†–∞–±–æ—Ç–∞")
async def show_work(message: types.Message):
    user = economy.users.get(message.from_user.id)
    if not user:
        return

    energy_info = f"\n‚ö° –í–∞—à–∞ —ç–Ω–µ—Ä–≥–∏—è: {user['energy']}/100"
    await message.answer(f"üíº –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:{energy_info}", reply_markup=work_keyboard())


@dp.message(F.text == "üè¶ –ë–∞–Ω–∫")
async def show_bank(message: types.Message):
    await message.answer("üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=bank_keyboard())


@dp.message(F.text == "üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
async def show_investments(message: types.Message):
    event_msg = economy.update_market()
    if event_msg:
        await message.answer(f"‚ö†Ô∏è {event_msg}")

    rates_text = "\n".join(
        f"{data['emoji']} {asset}: ${data['price']} ({'+' if data['price'] > 100 else ''}{data['price'] - 100:.2f}%)"
        for asset, data in economy.stock_market.items()
    )

    await message.answer(
        f"üìä –¢–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏:\n\n{rates_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=investment_keyboard()
    )


@dp.message(F.text == "üè≠ –ë–∏–∑–Ω–µ—Å")
async def show_business(message: types.Message):
    business_list = "\n".join(
        f"{b['emoji']} {b['name']} - ${b['cost']} (+${b['income']}/–¥–µ–Ω—å)"
        for b in economy.businesses.values()
    )

    await message.answer(
        f"üè≠ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è:\n\n{business_list}\n\n"
        "–ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π—Ç–µ –±–∏–∑–Ω–µ—Å—ã –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞:",
        reply_markup=business_keyboard()
    )


@dp.message(F.text == "üé∞ –õ–æ—Ç–µ—Ä–µ—è")
async def show_lottery(message: types.Message):
    user_id = message.from_user.id
    user = economy.users.get(user_id)
    if not user:
        return

    tickets = economy.lottery["tickets"].get(user_id, 0)
    cooldown = ""

    if user["last_lottery"]:
        elapsed = (datetime.datetime.now() - user["last_lottery"]).total_seconds()
        if elapsed < 3600:
            cooldown = f"\n‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑: {int((3600 - elapsed) // 60)} –º–∏–Ω."

    await message.answer(
        f"üé∞ –õ–æ—Ç–µ—Ä–µ—è\n\n"
        f"üé´ –í–∞—à–∏ –±–∏–ª–µ—Ç—ã: {tickets}\n"
        f"üí∞ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: {economy.lottery['pool']} coins\n"
        f"üèÜ –°–ª–µ–¥—É—é—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à —á–µ—Ä–µ–∑: {60 - datetime.datetime.now().minute} –º–∏–Ω."
        f"{cooldown}",
        reply_markup=lottery_keyboard()
    )


@dp.message(F.text == "üåë –ß–µ—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫")
async def show_black_market(message: types.Message):
    user = economy.users.get(message.from_user.id)
    if not user:
        return

    risk_info = ""
    if user["criminal_record"] > 0:
        risk_info = f"\n‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Ä–æ–∑—ã—Å–∫–∞: {min(100, int(user['criminal_record'] * 20))}%"

    await message.answer(
        f"üåë –ß–µ—Ä–Ω—ã–π —Ä—ã–Ω–æ–∫\n\n"
        f"–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à—É—é –ø—Ä–∏–±—ã–ª—å, –Ω–æ —Å —Ä–∏—Å–∫–æ–º –±—ã—Ç—å –ø–æ–π–º–∞–Ω–Ω—ã–º.{risk_info}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=black_market_keyboard()
    )


@dp.message(F.text == "üìä –¢–æ–ø—ã")
async def show_tops(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÜ –°–∞–º—ã–µ –±–æ–≥–∞—Ç—ã–µ", callback_data="top:rich")],
        [InlineKeyboardButton(text="üí™ –°–∞–º—ã–µ –≤–ª–∏—è—Ç–µ–ª—å–Ω—ã–µ", callback_data="top:power")],
        [InlineKeyboardButton(text="üî´ –°–∞–º—ã–µ –æ–ø–∞—Å–Ω—ã–µ", callback_data="top:criminal")]
    ])
    await message.answer("üìä –¢–æ–ø—ã –∏–≥—Ä–æ–∫–æ–≤:", reply_markup=keyboard)


@dp.message(F.text == "üîÅ –û–±–º–µ–Ω –≤–∞–ª—é—Ç")
async def show_exchange(message: types.Message):
    rates_text = "\n".join(f"1 {curr} = {rate:.6f} BTC" for curr, rate in economy.exchange_rates.items())

    await message.answer(
        f"üí± –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞:\n\n{rates_text}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /exchange [–∏–∑] [–≤] [—Å—É–º–º–∞] –¥–ª—è –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç\n"
        "–ü—Ä–∏–º–µ—Ä: /exchange COIN BTC 100"
    )


# =====================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ò–ù–õ–ê–ô–ù-–ö–ù–û–ü–û–ö
# =====================

@dp.callback_query(F.data.startswith("work:"))
async def handle_work(callback: types.CallbackQuery):
    job_type = callback.data.split(":")[1]
    user_id = callback.from_user.id

    success, result = economy.work(user_id, job_type)

    if success:
        await callback.message.answer(
            f"üíº –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {result} coins! ‚ö° –≠–Ω–µ—Ä–≥–∏—è: {economy.users[user_id]['energy']}/100")
    elif result == "energy":
        await callback.message.answer("üõë –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
    else:
        minutes = int(result) // 60
        await callback.message.answer(
            f"‚è≥ –í—ã —É—Å—Ç–∞–ª–∏! –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ {minutes} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞–±–æ—Ç–æ–π."
        )
    await callback.answer()


@dp.callback_query(F.data == "transfer_money")
async def start_transfer(callback: types.CallbackQuery):
    await callback.message.answer(
        "üí∏ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "/transfer @username —Å—É–º–º–∞\n"
        "–ü—Ä–∏–º–µ—Ä: /transfer @user123 500"
    )
    await callback.answer()


@dp.callback_query(F.data == "transaction_history")
async def show_history(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    transactions = [t for t in economy.transaction_log if t["user_id"] == user_id][-5:]

    if not transactions:
        await callback.message.answer("üìù –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞")
        await callback.answer()
        return

    history_text = "\n\n".join(
        f"{t['timestamp'].strftime('%d.%m %H:%M')}: {t['description']}\n"
        f"–ë–∞–ª–∞–Ω—Å: {t['balance']} coins, –ë–∞–Ω–∫: {t['bank']} coins"
        for t in reversed(transactions))

    await callback.message.answer(f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n\n{history_text}")
    await callback.answer()


@dp.callback_query(F.data == "show_energy")
async def show_energy(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = economy.users.get(user_id)
    if not user:
        return

    recharge_time = ""
    if user["energy"] < 100:
        recharge_minutes = (100 - user["energy"]) // 2
        recharge_time = f"\n\n‚ö° –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {recharge_minutes} –º–∏–Ω."

    await callback.message.answer(
        f"‚ö° –í–∞—à–∞ —ç–Ω–µ—Ä–≥–∏—è: {user['energy']}/100\n"
        f"üí° –≠–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è 1 –µ–¥–∏–Ω–∏—Ü—É –≤ –º–∏–Ω—É—Ç—É.{recharge_time}"
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("bank:"))
async def handle_bank(callback: types.CallbackQuery):
    action = callback.data.split(":")[1]

    if action == "deposit":
        await callback.message.answer("üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –≤ –±–∞–Ω–∫:\n/deposit —Å—É–º–º–∞")
    elif action == "withdraw":
        await callback.message.answer("üèß –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è —Å –±–∞–Ω–∫–∞:\n/withdraw —Å—É–º–º–∞")
    elif action == "interest":
        await callback.message.answer(
            "üè¶ –ë–∞–Ω–∫ –Ω–∞—á–∏—Å–ª—è–µ—Ç 1% + 0.02% –∑–∞ –∫–∞–∂–¥—ã–π 1000 –ø—Ä–µ—Å—Ç–∏–∂–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –Ω–∞ –≤–∞—à –¥–µ–ø–æ–∑–∏—Ç. "
            "–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ."
        )

    await callback.answer()


@dp.callback_query(F.data.startswith("invest:"))
async def handle_investment(callback: types.CallbackQuery):
    _, asset = callback.data.split(":", 1)

    if asset == "sell":
        await callback.message.answer("üí± –í–≤–µ–¥–∏—Ç–µ –∞–∫—Ç–∏–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:\n/sell [–∞–∫—Ç–∏–≤]")
        await callback.answer()
        return

    await callback.message.answer(
        f"üìà –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ {asset}:\n/invest {asset} —Å—É–º–º–∞"
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("business:"))
async def handle_business(callback: types.CallbackQuery):
    _, action = callback.data.split(":", 1)
    user_id = callback.from_user.id

    if action == "collect":
        income = economy.collect_business_income(user_id)
        await callback.message.answer(f"üè≠ –í–∞—à–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –ø—Ä–∏–Ω–µ—Å–ª–∏ {income} coins –¥–æ—Ö–æ–¥–∞!")
    else:
        for b_id, b_data in economy.businesses.items():
            if b_id == action:
                success, result = economy.buy_business(user_id, b_id)
                if success:
                    await callback.message.answer(f"üè≠ –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {result}!")
                else:
                    await callback.message.answer(f"‚ùå {result}")
                break

    await callback.answer()


@dp.callback_query(F.data.startswith("lottery:"))
async def handle_lottery(callback: types.CallbackQuery):
    action = callback.data.split(":")[1]
    user_id = callback.from_user.id

    if action == "buy":
        amount = int(callback.data.split(":")[2])
        discount = 0.9 if amount == 5 else 1
        cost = amount * 100 * discount

        success, result = economy.buy_lottery_ticket(user_id, amount)
        if success:
            await callback.message.answer(f"üé´ –í—ã –∫—É–ø–∏–ª–∏ {amount} –ª–æ—Ç–µ—Ä–µ–π–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –∑–∞ {cost} coins!")
        elif result == "cooldown":
            await callback.message.answer("‚è≥ –í—ã –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–∫—É–ø–∞–ª–∏ –±–∏–ª–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await callback.message.answer(f"‚ùå {result}")
    elif action == "draw":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç—ã —á–∞—Å–∞)
        if datetime.datetime.now().minute < 55:
            await callback.message.answer("‚åõ –†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞")
            await callback.answer()
            return

        winner = economy.draw_lottery()
        if not winner:
            await callback.message.answer("üò¢ –í –ª–æ—Ç–µ—Ä–µ–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        else:
            winner_id, prize = winner
            username = economy.users[winner_id]["username"]
            await callback.message.answer(f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ª–æ—Ç–µ—Ä–µ–∏: {username}!\nüí∞ –í—ã–∏–≥—Ä—ã—à: {prize} coins!")

    await callback.answer()


@dp.callback_query(F.data.startswith("black_market:"))
async def handle_black_market(callback: types.CallbackQuery):
    item_id = callback.data.split(":")[1]
    user_id = callback.from_user.id

    success, result = economy.black_market_deal(user_id, item_id)

    if success:
        await callback.message.answer(f"üåë –£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞! –ü—Ä–∏–±—ã–ª—å: {result} coins\n"
                                      f"‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Ä–æ–∑—ã—Å–∫–∞: {min(100, int(economy.users[user_id]['criminal_record'] * 20))}%")
    else:
        await callback.message.answer(f"‚ùå {result}")

    await callback.answer()


@dp.callback_query(F.data.startswith("top:"))
async def handle_top(callback: types.CallbackQuery):
    top_type = callback.data.split(":")[1]

    if top_type == "rich":
        top_list = economy.get_rich_list()
        title = "üèÜ –¢–æ–ø-10 —Å–∞–º—ã—Ö –±–æ–≥–∞—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤"
    elif top_type == "power":
        top_list = economy.get_power_list()
        title = "üí™ –¢–æ–ø-10 —Å–∞–º—ã—Ö –≤–ª–∏—è—Ç–µ–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤"
    else:
        top_list = sorted(
            economy.users.items(),
            key=lambda x: x[1]["criminal_record"],
            reverse=True
        )[:10]
        title = "üî´ –¢–æ–ø-10 —Å–∞–º—ã—Ö –æ–ø–∞—Å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤"

    if not top_list:
        await callback.message.answer("üò¢ –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–ø–∞")
        await callback.answer()
        return

    top_text = []
    if top_type == "rich":
        for i, (uid, data) in enumerate(top_list):
            investments_value = sum(
                economy.stock_market[asset]["price"] / 100 * amount
                for asset, amount in data["investments"].items()
            )
            business_value = sum(
                economy.businesses[b]["cost"] * count
                for b, count in data["businesses"].items()
            )
            total = data["coins"] + data["bank"] + investments_value + business_value
            top_text.append(f"{i + 1}. {data['username']} - {total:.2f} coins")
    elif top_type == "power":
        for i, (uid, data) in enumerate(top_list):
            influence = sum(data["businesses"].values()) * 100 + sum(data["investments"].values()) + data[
                "prestige"] * 10
            top_text.append(f"{i + 1}. {data['username']} - {influence:.2f} –≤–ª–∏—è–Ω–∏—è")
    else:
        for i, (uid, data) in enumerate(top_list):
            top_text.append(
                f"{i + 1}. {data['username']} - —É—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã: {min(100, int(data['criminal_record'] * 20))}%")

    await callback.message.answer(f"{title}:\n\n" + "\n".join(top_text))
    await callback.answer()


# =====================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# =====================

@dp.message(Command("daily"))
async def daily_command(message: types.Message):
    user_id = message.from_user.id
    success, result = economy.daily_bonus(user_id)

    if success:
        await message.answer(f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: {result} coins! ‚ö° –≠–Ω–µ—Ä–≥–∏—è +30")
    else:
        hours = result.seconds // 3600
        minutes = (result.seconds % 3600) // 60
        await message.answer(
            f"‚è≥ –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è. –°–ª–µ–¥—É—é—â–∞—è —á–µ—Ä–µ–∑: {hours}—á {minutes}–º–∏–Ω"
        )


@dp.message(Command("transfer"))
async def transfer_command(message: types.Message):
    user_id = message.from_user.id
    parts = message.text.split()

    if len(parts) < 3:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /transfer @username —Å—É–º–º–∞")
        return

    try:
        amount = int(parts[2])
        receiver_name = parts[1].lstrip('@')

        receiver_id = None
        for uid, data in economy.users.items():
            if data["username"] == receiver_name:
                receiver_id = uid
                break

        if not receiver_id:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        success, result = economy.transfer(user_id, receiver_id, amount)

        if success:
            received, tax = result
            await message.answer(
                f"üí∏ –í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ {amount} coins –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {receiver_name}\n"
                f"üìù –ù–∞–ª–æ–≥: {tax} coins\n"
                f"üíº –ü–æ–ª—É—á–∞—Ç–µ–ª—é –∑–∞—á–∏—Å–ª–µ–Ω–æ: {received} coins\n"
                f"üèÜ +{amount // 1000} –ø—Ä–µ—Å—Ç–∏–∂–∞"
            )
        else:
            await message.answer(f"‚ùå {result}")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã")


@dp.message(Command("deposit"))
async def deposit_command(message: types.Message):
    user_id = message.from_user.id
    try:
        amount = int(message.text.split()[1])
        success, result = economy.deposit_to_bank(user_id, amount)

        if success:
            await message.answer(f"üí≥ –í—ã –≤–Ω–µ—Å–ª–∏ {amount} coins –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç\nüèÜ +{amount // 1000} –ø—Ä–µ—Å—Ç–∏–∂–∞")
        else:
            await message.answer(f"‚ùå {result}")
    except (IndexError, ValueError):
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /deposit —Å—É–º–º–∞")


@dp.message(Command("withdraw"))
async def withdraw_command(message: types.Message):
    user_id = message.from_user.id
    try:
        amount = int(message.text.split()[1])
        success, result = economy.withdraw_from_bank(user_id, amount)

        if success:
            await message.answer(f"üèß –í—ã —Å–Ω—è–ª–∏ {amount} coins —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞")
        else:
            await message.answer(f"‚ùå {result}")
    except (IndexError, ValueError):
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /withdraw —Å—É–º–º–∞")


@dp.message(Command("invest"))
async def invest_command(message: types.Message):
    user_id = message.from_user.id
    parts = message.text.split()

    if len(parts) < 3:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /invest [–∞–∫—Ç–∏–≤] —Å—É–º–º–∞")
        return

    try:
        asset = parts[1].upper()
        amount = int(parts[2])
        success, result = economy.invest(user_id, asset, amount)

        if success:
            await message.answer(f"üìà –í—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ {amount} coins –≤ {asset}\nüèÜ +{amount // 500} –ø—Ä–µ—Å—Ç–∏–∂–∞")
        else:
            await message.answer(f"‚ùå {result}")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã")


@dp.message(Command("sell"))
async def sell_command(message: types.Message):
    user_id = message.from_user.id
    parts = message.text.split()

    if len(parts) < 2:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /sell [–∞–∫—Ç–∏–≤]")
        return

    asset = parts[1].upper()
    success, result = economy.sell_investment(user_id, asset)

    if success:
        current_value, profit = result
        profit_text = "–ü—Ä–∏–±—ã–ª—å" if profit >= 0 else "–£–±—ã—Ç–æ–∫"
        await message.answer(
            f"üí± –í—ã –ø—Ä–æ–¥–∞–ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ {asset} –∑–∞ {current_value} coins\n"
            f"üìä {profit_text}: {abs(profit)} coins"
        )
    else:
        await message.answer(f"‚ùå {result}")


@dp.message(Command("exchange"))
async def exchange_command(message: types.Message):
    user_id = message.from_user.id
    parts = message.text.split()

    if len(parts) < 4:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /exchange [–∏–∑] [–≤] [—Å—É–º–º–∞]")
        return

    from_curr = parts[1].upper()
    to_curr = parts[2].upper()

    try:
        amount = float(parts[3])
        success, result = economy.exchange(user_id, from_curr, to_curr, amount)

        if success:
            await message.answer(
                f"üí± –û–±–º–µ–Ω: {amount} {from_curr} ‚Üí {result:.6f} {to_curr}"
            )
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞ –¥–ª—è –æ–±–º–µ–Ω–∞")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã")


@dp.message(Command("energy"))
async def energy_command(message: types.Message):
    user_id = message.from_user.id
    user = economy.users.get(user_id)
    if not user:
        return

    recharge_time = ""
    if user["energy"] < 100:
        recharge_minutes = (100 - user["energy"]) // 2
        recharge_time = f"\n\n‚ö° –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {recharge_minutes} –º–∏–Ω."

    await message.answer(
        f"‚ö° –í–∞—à–∞ —ç–Ω–µ—Ä–≥–∏—è: {user['energy']}/100\n"
        f"üí° –≠–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è 1 –µ–¥–∏–Ω–∏—Ü—É –≤ 2 –º–∏–Ω—É—Ç—ã.{recharge_time}"
    )


# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–∞
async def market_updater():
    while True:
        await asyncio.sleep(60)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        event_msg = economy.update_market()
        economy.bank_interest()

        # –†–æ–∑—ã–≥—Ä—ã—à –ª–æ—Ç–µ—Ä–µ–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç —á–∞—Å–∞
        now = datetime.datetime.now()
        if now.minute >= 55:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç —á–∞—Å–∞
            winner = economy.draw_lottery()
            if winner:
                winner_id, prize = winner
                username = economy.users[winner_id]["username"]
                # –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                for user_id in economy.users:
                    try:
                        await bot.send_message(
                            user_id,
                            f"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–æ—Ç–µ—Ä–µ–∏!\n\n"
                            f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {username}\n"
                            f"–í—ã–∏–≥—Ä—ã—à: {prize} coins!\n\n"
                            f"–°–ª–µ–¥—É—é—â–∞—è –ª–æ—Ç–µ—Ä–µ—è —á–µ—Ä–µ–∑ 1 —á–∞—Å"
                        )
                    except:
                        pass  # –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–∞
    asyncio.create_task(market_updater())
    await dp.start_polling(bot)


if __name__ == "__main__":
    print("–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω! (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
    asyncio.run(main())